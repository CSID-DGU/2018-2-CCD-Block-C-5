apply plugin: 'com.android.application'
apply plugin: 'androidsvgdrawable'

configurations {
    all*.exclude group: 'com.google.android', module: 'android'
    all*.exclude group: 'com.android.support', module: 'support-media-compat'
}

dependencies {
    implementation project(':integration-android')
    implementation 'com.android.support:support-annotations:28.0.0'
    implementation 'com.android.support:support-compat:28.0.0'
    implementation 'com.android.support:support-fragment:28.0.0'
    implementation 'com.android.support:support-core-utils:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation "android.arch.persistence:db:1.1.1"
    implementation "android.arch.persistence.room:runtime:1.1.1"
    annotationProcessor "android.arch.persistence.room:compiler:1.1.1"
    implementation 'org.bitcoinj:bitcoinj-core:0.14.7'
    implementation 'com.google.protobuf:protobuf-java:2.6.1'
    implementation 'com.google.guava:guava:25.1-android'
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'
    implementation 'com.squareup.moshi:moshi:1.6.0'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'com.github.tony19:logback-android:1.3.0-2'
    implementation 'com.google.code.findbugs:jsr305:2.0.3'
    testImplementation 'junit:junit:4.12'
}

ext {
    archivesBaseName = 'bitcoin-wallet'
}

android {
    compileSdkVersion 'android-28'
    buildToolsVersion '28.0.3'

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    defaultConfig {
        minSdkVersion = 14
        applicationId 'de.schildbach.wallet_test'
        generatedDensities = ['hdpi', 'xhdpi']
        vectorDrawables.useSupportLibrary = true

        dexOptions {
            preDexLibraries false
        }

        ndk {
            abiFilters 'armeabi-v7a', 'x86'
        }

        externalNativeBuild {
            cmake {
                cFlags '-DHAVE_CONFIG_H'
            }
        }
    }

    buildTypes {
        all {
            minifyEnabled true
            proguardFile 'proguard.cfg'
        }
        debug {
            debuggable true
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        test {
            java.srcDirs = ['test']
            resources.srcDirs = ['test']
        }
    }

    externalNativeBuild {
        cmake {
            path 'cpp/CMakeLists.txt'
        }
    }

    packagingOptions {
        exclude 'META-INF/*.version'
        exclude 'META-INF/proguard/**'
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'okhttp3/internal/publicsuffix/publicsuffixes.gz'
        exclude 'org/bitcoinj/crypto/mnemonic/wordlist/english.txt'
        exclude 'org/bitcoinj/crypto/cacerts'
        exclude 'org.bitcoin.production.checkpoints.txt'
        exclude 'org.bitcoin.test.checkpoints.txt'
    }
}

task svgToPngMipmap(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    from = files('graphics/mipmap')
    to = file('res')
    targetedDensities = ['hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    outputFormat = 'PNG'
    outputType = 'mipmap'
}
